name: Build and Release Android App

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.26.3)'
        required: false
        type: string
      build_number:
        description: 'Build number'
        required: false
        type: number

permissions:
  contents: write  # Required to create releases and upload assets

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Public/runtime variables from GitHub Repository/Org Variables
      APP_ENV: ${{ vars.APP_ENV }}
      API_URL: ${{ vars.API_URL }}
      # Error reporting
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      # Firebase (prefer Secrets for sensitive keys)
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_DOMAIN: ${{ vars.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_PROJECT_ID: ${{ vars.FIREBASE_PROJECT_ID }}
      FIREBASE_STORAGE_BUCKET: ${{ vars.FIREBASE_STORAGE_BUCKET }}
      FIREBASE_MESSAGING_SENDER_ID: ${{ vars.FIREBASE_MESSAGING_SENDER_ID }}
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      FIREBASE_MEASUREMENT_ID: ${{ vars.FIREBASE_MEASUREMENT_ID }}
      FIREBASE_DATABASE_URL: ${{ vars.FIREBASE_DATABASE_URL }}
      # Android signing (optional)
      ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare build-time environment (.env) and Android signing (optional)
        shell: bash
        run: |
          set -euo pipefail
          echo "Preparing .env from GitHub Variables/Secrets (only defined keys will be written)"
          : > .env
          for key in \
            APP_ENV API_URL SENTRY_DSN \
            FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID \
            FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID \
            FIREBASE_APP_ID FIREBASE_MEASUREMENT_ID FIREBASE_DATABASE_URL; do
            val="${!key-}"
            if [ -n "${val}" ]; then
              echo "$key=$val" >> .env
              echo "‚úì .env: wrote $key"
            else
              echo "- .env: skipped $key (empty)"
            fi
          done

          echo "NODE_ENV=production" >> "$GITHUB_ENV"

          echo "Setting up Android signing if keystore secret is provided"
          if [ -n "${ANDROID_KEYSTORE_B64-}" ]; then
            mkdir -p android/app
            echo "$ANDROID_KEYSTORE_B64" | base64 -d > android/app/release.keystore
            echo "ANDROID_KEYSTORE_FILE=$GITHUB_WORKSPACE/android/app/release.keystore" >> "$GITHUB_ENV"

            mkdir -p "$HOME/.gradle"
            {
              echo "ANDROID_KEYSTORE_FILE=$GITHUB_WORKSPACE/android/app/release.keystore"
              [ -n "${ANDROID_KEY_ALIAS-}" ] && echo "ANDROID_KEY_ALIAS=$ANDROID_KEY_ALIAS"
              [ -n "${ANDROID_STORE_PASSWORD-}" ] && echo "ANDROID_STORE_PASSWORD=$ANDROID_STORE_PASSWORD"
              [ -n "${ANDROID_KEY_PASSWORD-}" ] && echo "ANDROID_KEY_PASSWORD=$ANDROID_KEY_PASSWORD"
              # Common alternative names some projects expect
              [ -n "${ANDROID_KEY_ALIAS-}" ] && echo "MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_KEY_ALIAS"
              [ -n "${ANDROID_STORE_PASSWORD-}" ] && echo "MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_STORE_PASSWORD"
              [ -n "${ANDROID_KEY_PASSWORD-}" ] && echo "MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_KEY_PASSWORD"
              echo "MYAPP_UPLOAD_STORE_FILE=$GITHUB_WORKSPACE/android/app/release.keystore"
            } >> "$HOME/.gradle/gradle.properties"
            echo "‚úì Android signing configured"
          else
            echo "- No ANDROID_KEYSTORE_B64 provided; building unsigned release APKs"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: npm ci

      - name: Extract version from appConfig.ts
        id: version
        run: |
          VERSION=$(grep -oP "VERSION:\s*['\"]([^'\"]+)['\"]" constants/appConfig.ts | grep -oP "['\"]([^'\"]+)['\"]" | tr -d "'\"")
          VERSION_CODE=$(grep -oP "VERSION_CODE:\s*(\d+)" constants/appConfig.ts | grep -oP "\d+")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION (Build: $VERSION_CODE)"

      - name: Update version (if manually triggered)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BUILD_NUMBER="${{ github.event.inputs.build_number }}"
          if [ -n "$BUILD_NUMBER" ]; then
            node scripts/update-version.js "$VERSION" "$BUILD_NUMBER"
          fi

      - name: Create assets directory
        run: mkdir -p android/app/src/main/assets

      - name: Bundle JavaScript
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file app/_layout.tsx \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/assets

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build Release APKs
        working-directory: android
        run: ./gradlew clean assembleRelease

      - name: Rename APKs
        id: rename
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_CODE="${{ steps.version.outputs.version_code }}"
          
          APK_DIR="android/app/build/outputs/apk/release"
          OUTPUT_DIR="releases/${VERSION}-${VERSION_CODE}"
          
          mkdir -p "$OUTPUT_DIR"
          
          # Rename and move APKs
          declare -A apk_map=(
            ["app-arm64-v8a-release.apk"]="Anisurge-arm64-v8a.apk"
            ["app-armeabi-v7a-release.apk"]="Anisurge-armeabi-v7a.apk"
            ["app-x86-release.apk"]="Anisurge-x86.apk"
            ["app-x86_64-release.apk"]="Anisurge-x86_64.apk"
            ["app-universal-release.apk"]="Anisurge-universal.apk"
          )
          
          for original in "${!apk_map[@]}"; do
            new_name="${apk_map[$original]}"
            if [ -f "$APK_DIR/$original" ]; then
              cp "$APK_DIR/$original" "$OUTPUT_DIR/$new_name"
              echo "‚úì Copied: $new_name"
            else
              echo "‚ö† Not found: $original"
            fi
          done
          
          # Create version info
          cat > "$OUTPUT_DIR/version-info.txt" <<EOF
          Version: $VERSION
          Version Code: $VERSION_CODE
          Release Date: $(date '+%Y-%m-%d %H:%M:%S')
          Commit: ${{ github.sha }}
          EOF
          
          echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}-${VERSION_CODE}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          TAG_NAME="${{ steps.rename.outputs.tag_name }}"
          echo "Preparing tag: $TAG_NAME"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          
          # Check if tag exists and delete it if it does
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Deleting old tag to create new one."
            git tag -d "$TAG_NAME"
            git push origin --delete "$TAG_NAME" || true
            echo "Old tag deleted successfully"
          fi
          
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "New tag $TAG_NAME created and pushed"

      - name: Delete existing release if present
        continue-on-error: true
        run: |
          TAG_NAME="${{ steps.rename.outputs.tag_name }}"
          gh release delete "$TAG_NAME" --yes || echo "No existing release to delete"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.rename.outputs.tag_name }}
          target_commitish: ${{ github.sha }}
          name: Anisurge v${{ steps.version.outputs.version }} (Build ${{ steps.version.outputs.version_code }})
          body: |
            ## üöÄ Anisurge v${{ steps.version.outputs.version }}
            
            **Build Number:** ${{ steps.version.outputs.version_code }}
            **Release Date:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            
            ### üì± Download APKs
            
            Choose the appropriate APK for your device:
            - **arm64-v8a**: Modern 64-bit ARM devices (recommended for most)
            - **armeabi-v7a**: Older 32-bit ARM devices
            - **x86_64**: 64-bit x86 devices (emulators, some tablets)
            - **x86**: 32-bit x86 devices
            - **universal**: Works on all devices (larger file size)
            
            ### üìù Changes
            ${{ github.event.head_commit.message }}
          files: |
            ${{ steps.rename.outputs.output_dir }}/Anisurge-*.apk
            ${{ steps.rename.outputs.output_dir }}/version-info.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up artifacts
        if: always()
        run: |
          rm -rf android/app/build/outputs/apk
          rm -rf releases
          echo "‚úì Artifacts cleaned up"