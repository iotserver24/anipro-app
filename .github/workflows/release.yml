name: Build and Release APKs

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v2.26.5
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 2.26.5)'
        required: true
        default: '2.26.5'
      version_code:
        description: 'Version code (e.g., 1)'
        required: true
        default: '1'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper tagging

      - name: Extract version from tag
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag (e.g., v2.26.5 -> 2.26.5)
            VERSION=${GITHUB_REF#refs/tags/v}
            VERSION_CODE=$(echo $VERSION | cut -d'.' -f3)  # Use patch as version code
          else
            # Use input values for manual dispatch
            VERSION="${{ github.event.inputs.version }}"
            VERSION_CODE="${{ github.event.inputs.version_code }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION (code: $VERSION_CODE)"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version numbers
        run: |
          node scripts/version-manager.js update ${{ steps.extract_version.outputs.version }} ${{ steps.extract_version.outputs.version_code }}

      - name: React Native JS bundle
        run: |
          npx react-native bundle --platform android \
            --dev false \
            --entry-file app/_layout.tsx \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build APKs
        working-directory: android
        run: ./gradlew assembleRelease

      - name: Prepare APK files
        run: |
          mkdir -p release-apks
          
          # Copy and rename APKs with version info
          for f in android/app/build/outputs/apk/release/*.apk; do
            base=$(basename "$f")
            if [[ "$base" == *universal*.apk ]]; then
              suffix="universal"
            elif [[ "$base" == *arm64*.apk ]]; then
              suffix="arm64-v8a"
            elif [[ "$base" == *x86_64*.apk ]]; then
              suffix="x86_64"
            elif [[ "$base" == *x86*.apk ]]; then
              suffix="x86"
            else
              suffix="${base%.apk}"
            fi
            cp "$f" "release-apks/AniSurge-v${{ steps.extract_version.outputs.version }}-$suffix.apk"
          done
          
          # List prepared APKs
          echo "Prepared APKs:"
          ls -lh release-apks/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's New in v${{ steps.extract_version.outputs.version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "### Changes since $PREVIOUS_TAG:" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
          else
            echo "## AniSurge v${{ steps.extract_version.outputs.version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "### New Release" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "### APK Files:" >> release_notes.md
          echo "- **Universal APK**: Compatible with all Android devices" >> release_notes.md
          echo "- **ARM64 APK**: Optimized for 64-bit ARM devices (most modern phones)" >> release_notes.md
          echo "- **x86_64 APK**: For Intel/AMD 64-bit devices (emulators, some tablets)" >> release_notes.md
          echo "- **x86 APK**: For 32-bit Intel/AMD devices" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation:" >> release_notes.md
          echo "1. Download the APK file that matches your device architecture" >> release_notes.md
          echo "2. Enable 'Install from unknown sources' in your Android settings" >> release_notes.md
          echo "3. Install the APK file" >> release_notes.md
          
          # Output the release notes for the next step
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: AniSurge v${{ steps.extract_version.outputs.version }}
          body_path: release_notes.md
          files: release-apks/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to Public Repository (if configured)
        if: env.PUBLIC_REPO_TOKEN != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: AniSurge v${{ steps.extract_version.outputs.version }}
          body_path: release_notes.md
          files: release-apks/*.apk
          repository: iotserver24/anisurge-apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}

      - name: Cleanup
        run: |
          rm -rf release-apks/
          rm -f release_notes.md
